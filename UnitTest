# 4/15/2021 @ 7:22 am

import point, line, triangle
import operator as op

eq_comp = op.__eq__
is_comp = op.is_

def elems_comp(a_list, b_list):
    # Return true if every element of a is an element of b and vice versa, False otherwise
    if not isinstance(a_list, list) or not isinstance(b_list, list):
        return False
    for elem in a_list:
        if elem not in b_list:
            return False
    for elem in b_list:
        if elem not in b_list:
            return False
    return True

def order_comp(a_list, b_list):
    for i in range(len(a_list)):
        try:
            if a_list[i] != b_list[i]:
                return False
        except:
            return False
    return True

def eq_not_is(an_obj, another_obj):
    return (an_obj == another_obj) and not(an_obj is another_obj)

def approx_eq(expected, actual):
    if expected is None:
        if actual is None:
            return True
        return False
    if isinstance(expected, (int, float, complex)) and not isinstance(expected, bool):
        return abs(expected - actual) < 0.000001
    return False

def build_arg_str(args, is_poly):
    arg_str = ""
    if is_poly:
        for arg in args:
            if callable(arg):
                arg_str = arg_str + arg.__name__ + " "
            else:
                if isinstance(arg, str):
                    arg_str = arg_str + "'" + arg + "'" + " "
                else:
                    arg_str = arg_str + str(arg) + " "
    else:
        if callable(args):
            arg_str = args.__name__
        else:
            if isinstance(args, str):
                arg_str = "'" + args + "'"
            else:
                arg_str = str(args)
    return arg_str.strip()

class Unit():

    def __init__(self, func, name, cases, is_polyadic, is_mutator, test_type):
        # If the function is polyadic, we need to * the input so that it unpacks.
        # If the function is a mutator, we don't ask for its return value.
        # Instead we compare the input after the function is called to the correct mutated value.
        # Six test types are required:
        # 1. Verify equality of content: eq_comp
        # 2. Verify identity: is_comp
        # 3. Verify content equality and non-identity: eq_not_is
        # 4. Verify that two lists have the same elements, order irrelevant: elems_comp
        # 5. Verify that two lists have same elements in same order: order_comp
        # 6. Verify that two floats are close enough: approx_eq
        self.func = func
        self.name = name
        self.cases = cases
        self.is_polyadic = is_polyadic
        self.is_mutator = is_mutator
        self.test_type = test_type
        self.score = 0

    def add_test(self, new_test):
        self.cases.append(new_test)

class UnitTest():

    def __init__(self, name, units):
        self.name = name
        self.units = units
        self.score = 0
        self.num_tests = 0

    def run_test(self):
        test_file = open("report.txt", "w")
        test_file.write(self.name + "\n")
        total_score = 0
        pts_lost_dict = {}
        for unit in self.units:
            pts_lost_dict[unit.name] = 0
            test_file.write("\nFunction: \"" + unit.name + "\"\n")
            for case in unit.cases:
                self.num_tests += 1
                arg = case[0]
                expected_value = case[1]
                arg_str = build_arg_str(arg, unit.is_polyadic)
                test_file.write("Argument(s): " + arg_str + "  ")
                try:
                    if unit.is_polyadic:
                        actual_value = unit.func(*arg)
                    else:
                        actual_value = unit.func(arg) 
                except:
                    test_file.write("Crash! No point!\n")
                    pts_lost_dict[unit.name] += 1
                else:
                    if not unit.is_mutator:
                        if unit.test_type(expected_value, actual_value):
                            test_file.write("  Return value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect return value! No point!\n")
                            pts_lost_dict[unit.name] += 1
                    else:
                        if unit.is_polyadic:
                            mutated_value = arg[0]
                        else:
                            mutated_value = arg
                        if unit.test_type(expected_value, mutated_value):
                            test_file.write("  Mutated value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect mutated value! No point!\n")
                            pts_lost_dict[unit.name] += 1

            total_score += unit.score

        self.score = total_score
        test_file.write("\nSummary:")
        if self.score < self.num_tests:
            for name in pts_lost_dict:
                pts_lost = pts_lost_dict[name]
                if pts_lost > 0:
                    test_file.write("\nFunction \"" + name + "\", points lost " + str(pts_lost) + ".")
        else:
            test_file.write("\nPerfection!")
        test_file.write("\nFinal Score: " + str(self.score) + "/" + str(self.num_tests))

# Method List
# Point: getX, getY, distance, slope, direction
# Line: isParallel, isPerp, intAt, getY
# Plane: getVertices, perimeter, area, isCongruent, contains

# Create Objects
objectsCreated = False
try:
    p1 = point.Point(1, 3)
    p2 = point.Point(0, -5)
    p3 = point.Point(-3, 12)
    ln1 = line.Line(3, 7)
    ln2 = line.Line(-5, 12)
    ln3 = line.Line(3, 12)
    ln4 = line.Line(0.2, 0)
    p4 = point.Point(-1, -13)
    p5 = point.Point(3, -22)
    tri1 = triangle.Triangle(p1, p2, p3)
    tri2 = triangle.Triangle(p2, p4, p5)
    p6 = point.Point(0, 4)
    p7 = point.Point(2, 4)
    p8 = point.Point(0, 0)
    p9 = point.Point(0, -12)
    p10 = point.Point(6, -6)
    p11 = point.Point(0, -6)
    tri3 = triangle.Triangle(p7, p8, p9)
    tri4 = triangle.Triangle(p9, p9, p9)
    objectsCreated = True
except:
    print("One or more objects could not be created. Test failed.")

if objectsCreated:

    # Test Cases (tc)
    # Format: a list of tuples where each tuple
    # gives an argument (or tuple of arguments)
    # and the expected return for that argument.
    pt_getX_tc = [(p1, 1)]
    pt_getY_tc = [(p2, -5)]
    distance_tc = [((p1, p3), 9.848857801796104), ((p1, p1), 0)]
    slope_tc = [((p1, p2), 8.0), ((p6, p7), 0), ((p6, p8), None)]
    direction_tc = [((p2, p3), -1.396124127786657)]
    isParallel_tc = [((ln1, ln2), False), ((ln1, ln3), True), ((ln1, ln1), True)]
    isPerp_tc = [((ln2, ln3), False), ((ln2, ln4), True)]
    intAt_tc = [((ln1, ln2), (0.625, 8.875)), ((ln3, ln4), (-4.285714285714286, -0.8571428571428577)), ((ln1, ln1), None)]
    ln_getY_tc = [((ln1, 12), 43), ((ln2, 12), -48)]
    perimeter_tc = [(tri1, 35.17379205172672), (tri4, 0)]
    area_tc = [(tri2, 20.499999999999986), (tri4, 0)]
    isCongruent_tc = [((tri1, tri2), True), ((tri1, tri3), False), ((tri3, tri3), True), ((tri4, tri4,), True)]
    contains_tc = [((tri1, p6), True), ((tri2, p7), False), ((tri3, p11), True), ((tri1, p1), True), ((tri4, p9), True)]

    unitsPresent = False

    try:
        # Create Units
        # Format: Unit(func, name, cases, is_polyadic, test_type)
        # Test types: eq_comp, is_comp, eq_not_is, elems_comp, approx_eq
        # If units cannot be created, test is aborted.
        pt_getX_unit = Unit(point.Point.getX, "getX", pt_getX_tc, False, False, approx_eq)
        pt_getY_unit = Unit(point.Point.getY, "getY", pt_getY_tc, False, False, approx_eq)
        distance_unit = Unit(point.Point.distance, "distance", distance_tc, True, False, approx_eq)
        slope_unit = Unit(point.Point.slope, "slope", slope_tc, True, False, approx_eq)
        direction_unit = Unit(point.Point.direction, "direction", direction_tc, True, False, approx_eq)
        isParallel_unit = Unit(line.Line.isParallel, "isParallel", isParallel_tc, True, False, eq_comp)
        isPerp_unit = Unit(line.Line.isPerp, "isPerp", isPerp_tc, True, False, eq_comp)
        intAt_unit = Unit(line.Line.intAt, "intAt", intAt_tc, True, False, eq_comp)
        ln_getY_unit = Unit(line.Line.getY, "getY", ln_getY_tc, True, False, eq_comp)
        perimeter_unit = Unit(triangle.Triangle.perimeter, "perimeter", perimeter_tc, False, False, eq_comp)
        area_unit = Unit(triangle.Triangle.area, "area", area_tc, False, False, eq_comp)
        isCongruent_unit = Unit(triangle.Triangle.isCongruent, "congruent", isCongruent_tc, True, False, eq_comp)
        contains_unit = Unit(triangle.Triangle. contains, "contains", contains_tc, True, False, eq_comp)
        unitsPresent = True
    except:
        print("One or more methods not defined. Test failed.")

    if unitsPresent:

        # Unit Test List
        units = [pt_getX_unit, pt_getY_unit, distance_unit, slope_unit, direction_unit, isParallel_unit, isPerp_unit,
        intAt_unit, ln_getY_unit, perimeter_unit, area_unit, isCongruent_unit, contains_unit]

        # Create Unit Test
        unit_test = UnitTest("Point Line Triangle", units)

        # Test!
        unit_test.run_test()
